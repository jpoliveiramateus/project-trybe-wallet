{"ast":null,"code":"'use strict';\n\nconst preserveCamelCase = string => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nconst camelCase = (input, options) => {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  const postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n  if (Array.isArray(input)) {\n    input = input.map(x => x.trim()).filter(x => x.length).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  const hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","map":{"version":3,"names":["preserveCamelCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","length","character","test","toUpperCase","slice","toLowerCase","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","postProcess","x","charAt","map","trim","filter","join","hasUpperCase","replace","_","p1","m","module","exports","default"],"sources":["/home/portuga/trybe-projetos/sd-021-b-project-trybewallet/node_modules/camelcase/index.js"],"sourcesContent":["'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}