{"ast":null,"code":"// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e);\n  }\n\n  argString = argString.trim();\n  let i = 0;\n  let prevC = null;\n  let c = null;\n  let opening = null;\n  const args = [];\n\n  for (let ii = 0; ii < argString.length; ii++) {\n    prevC = c;\n    c = argString.charAt(ii); // split on spaces unless we're in quotes.\n\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++;\n      }\n\n      continue;\n    } // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n\n\n    if (c === opening) {\n      opening = null;\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c;\n    }\n\n    if (!args[i]) args[i] = '';\n    args[i] += c;\n  }\n\n  return args;\n};","map":{"version":3,"names":["module","exports","argString","Array","isArray","map","e","trim","i","prevC","c","opening","args","ii","length","charAt"],"sources":["/home/portuga/trybe-projetos/sd-021-b-project-trybewallet/node_modules/yargs/node_modules/yargs-parser/lib/tokenize-arg-string.js"],"sourcesContent":["// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e)\n  }\n\n  argString = argString.trim()\n\n  let i = 0\n  let prevC = null\n  let c = null\n  let opening = null\n  const args = []\n\n  for (let ii = 0; ii < argString.length; ii++) {\n    prevC = c\n    c = argString.charAt(ii)\n\n    // split on spaces unless we're in quotes.\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++\n      }\n      continue\n    }\n\n    // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n    if (c === opening) {\n      opening = null\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c\n    }\n\n    if (!args[i]) args[i] = ''\n    args[i] += c\n  }\n\n  return args\n}\n"],"mappings":"AAAA;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;EACpC,IAAIC,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;IAC5B,OAAOA,SAAS,CAACG,GAAV,CAAcC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAC,GAAG,EAA5B,GAAiCA,CAApD,CAAP;EACD;;EAEDJ,SAAS,GAAGA,SAAS,CAACK,IAAV,EAAZ;EAEA,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAIC,CAAC,GAAG,IAAR;EACA,IAAIC,OAAO,GAAG,IAAd;EACA,MAAMC,IAAI,GAAG,EAAb;;EAEA,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGX,SAAS,CAACY,MAAhC,EAAwCD,EAAE,EAA1C,EAA8C;IAC5CJ,KAAK,GAAGC,CAAR;IACAA,CAAC,GAAGR,SAAS,CAACa,MAAV,CAAiBF,EAAjB,CAAJ,CAF4C,CAI5C;;IACA,IAAIH,CAAC,KAAK,GAAN,IAAa,CAACC,OAAlB,EAA2B;MACzB,IAAI,EAAEF,KAAK,KAAK,GAAZ,CAAJ,EAAsB;QACpBD,CAAC;MACF;;MACD;IACD,CAV2C,CAY5C;IACA;;;IACA,IAAIE,CAAC,KAAKC,OAAV,EAAmB;MACjBA,OAAO,GAAG,IAAV;IACD,CAFD,MAEO,IAAI,CAACD,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAApB,KAA4B,CAACC,OAAjC,EAA0C;MAC/CA,OAAO,GAAGD,CAAV;IACD;;IAED,IAAI,CAACE,IAAI,CAACJ,CAAD,CAAT,EAAcI,IAAI,CAACJ,CAAD,CAAJ,GAAU,EAAV;IACdI,IAAI,CAACJ,CAAD,CAAJ,IAAWE,CAAX;EACD;;EAED,OAAOE,IAAP;AACD,CAtCD"},"metadata":{},"sourceType":"script"}