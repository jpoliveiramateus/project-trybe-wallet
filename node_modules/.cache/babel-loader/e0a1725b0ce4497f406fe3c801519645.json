{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst {\n  promisify\n} = require('util');\n\nconst pLocate = require('p-locate');\n\nconst fsStat = promisify(fs.stat);\nconst fsLStat = promisify(fs.lstat);\nconst typeMappings = {\n  directory: 'isDirectory',\n  file: 'isFile'\n};\n\nfunction checkType(_ref) {\n  let {\n    type\n  } = _ref;\n\n  if (type in typeMappings) {\n    return;\n  }\n\n  throw new Error(`Invalid type specified: ${type}`);\n}\n\nconst matchType = (type, stat) => type === undefined || stat[typeMappings[type]]();\n\nmodule.exports = async (paths, options) => {\n  options = {\n    cwd: process.cwd(),\n    type: 'file',\n    allowSymlinks: true,\n    ...options\n  };\n  checkType(options);\n  const statFn = options.allowSymlinks ? fsStat : fsLStat;\n  return pLocate(paths, async path_ => {\n    try {\n      const stat = await statFn(path.resolve(options.cwd, path_));\n      return matchType(options.type, stat);\n    } catch (_) {\n      return false;\n    }\n  }, options);\n};\n\nmodule.exports.sync = (paths, options) => {\n  options = {\n    cwd: process.cwd(),\n    allowSymlinks: true,\n    type: 'file',\n    ...options\n  };\n  checkType(options);\n  const statFn = options.allowSymlinks ? fs.statSync : fs.lstatSync;\n\n  for (const path_ of paths) {\n    try {\n      const stat = statFn(path.resolve(options.cwd, path_));\n\n      if (matchType(options.type, stat)) {\n        return path_;\n      }\n    } catch (_) {}\n  }\n};","map":{"version":3,"names":["path","require","fs","promisify","pLocate","fsStat","stat","fsLStat","lstat","typeMappings","directory","file","checkType","type","Error","matchType","undefined","module","exports","paths","options","cwd","process","allowSymlinks","statFn","path_","resolve","_","sync","statSync","lstatSync"],"sources":["/home/portuga/trybe-projetos/sd-021-b-project-trybewallet/node_modules/yargs/node_modules/locate-path/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst fs = require('fs');\nconst {promisify} = require('util');\nconst pLocate = require('p-locate');\n\nconst fsStat = promisify(fs.stat);\nconst fsLStat = promisify(fs.lstat);\n\nconst typeMappings = {\n\tdirectory: 'isDirectory',\n\tfile: 'isFile'\n};\n\nfunction checkType({type}) {\n\tif (type in typeMappings) {\n\t\treturn;\n\t}\n\n\tthrow new Error(`Invalid type specified: ${type}`);\n}\n\nconst matchType = (type, stat) => type === undefined || stat[typeMappings[type]]();\n\nmodule.exports = async (paths, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\ttype: 'file',\n\t\tallowSymlinks: true,\n\t\t...options\n\t};\n\tcheckType(options);\n\tconst statFn = options.allowSymlinks ? fsStat : fsLStat;\n\n\treturn pLocate(paths, async path_ => {\n\t\ttry {\n\t\t\tconst stat = await statFn(path.resolve(options.cwd, path_));\n\t\t\treturn matchType(options.type, stat);\n\t\t} catch (_) {\n\t\t\treturn false;\n\t\t}\n\t}, options);\n};\n\nmodule.exports.sync = (paths, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tallowSymlinks: true,\n\t\ttype: 'file',\n\t\t...options\n\t};\n\tcheckType(options);\n\tconst statFn = options.allowSymlinks ? fs.statSync : fs.lstatSync;\n\n\tfor (const path_ of paths) {\n\t\ttry {\n\t\t\tconst stat = statFn(path.resolve(options.cwd, path_));\n\n\t\t\tif (matchType(options.type, stat)) {\n\t\t\t\treturn path_;\n\t\t\t}\n\t\t} catch (_) {\n\t\t}\n\t}\n};\n"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;EAACE;AAAD,IAAcF,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMI,MAAM,GAAGF,SAAS,CAACD,EAAE,CAACI,IAAJ,CAAxB;AACA,MAAMC,OAAO,GAAGJ,SAAS,CAACD,EAAE,CAACM,KAAJ,CAAzB;AAEA,MAAMC,YAAY,GAAG;EACpBC,SAAS,EAAE,aADS;EAEpBC,IAAI,EAAE;AAFc,CAArB;;AAKA,SAASC,SAAT,OAA2B;EAAA,IAAR;IAACC;EAAD,CAAQ;;EAC1B,IAAIA,IAAI,IAAIJ,YAAZ,EAA0B;IACzB;EACA;;EAED,MAAM,IAAIK,KAAJ,CAAW,2BAA0BD,IAAK,EAA1C,CAAN;AACA;;AAED,MAAME,SAAS,GAAG,CAACF,IAAD,EAAOP,IAAP,KAAgBO,IAAI,KAAKG,SAAT,IAAsBV,IAAI,CAACG,YAAY,CAACI,IAAD,CAAb,CAAJ,EAAxD;;AAEAI,MAAM,CAACC,OAAP,GAAiB,OAAOC,KAAP,EAAcC,OAAd,KAA0B;EAC1CA,OAAO,GAAG;IACTC,GAAG,EAAEC,OAAO,CAACD,GAAR,EADI;IAETR,IAAI,EAAE,MAFG;IAGTU,aAAa,EAAE,IAHN;IAIT,GAAGH;EAJM,CAAV;EAMAR,SAAS,CAACQ,OAAD,CAAT;EACA,MAAMI,MAAM,GAAGJ,OAAO,CAACG,aAAR,GAAwBlB,MAAxB,GAAiCE,OAAhD;EAEA,OAAOH,OAAO,CAACe,KAAD,EAAQ,MAAMM,KAAN,IAAe;IACpC,IAAI;MACH,MAAMnB,IAAI,GAAG,MAAMkB,MAAM,CAACxB,IAAI,CAAC0B,OAAL,CAAaN,OAAO,CAACC,GAArB,EAA0BI,KAA1B,CAAD,CAAzB;MACA,OAAOV,SAAS,CAACK,OAAO,CAACP,IAAT,EAAeP,IAAf,CAAhB;IACA,CAHD,CAGE,OAAOqB,CAAP,EAAU;MACX,OAAO,KAAP;IACA;EACD,CAPa,EAOXP,OAPW,CAAd;AAQA,CAlBD;;AAoBAH,MAAM,CAACC,OAAP,CAAeU,IAAf,GAAsB,CAACT,KAAD,EAAQC,OAAR,KAAoB;EACzCA,OAAO,GAAG;IACTC,GAAG,EAAEC,OAAO,CAACD,GAAR,EADI;IAETE,aAAa,EAAE,IAFN;IAGTV,IAAI,EAAE,MAHG;IAIT,GAAGO;EAJM,CAAV;EAMAR,SAAS,CAACQ,OAAD,CAAT;EACA,MAAMI,MAAM,GAAGJ,OAAO,CAACG,aAAR,GAAwBrB,EAAE,CAAC2B,QAA3B,GAAsC3B,EAAE,CAAC4B,SAAxD;;EAEA,KAAK,MAAML,KAAX,IAAoBN,KAApB,EAA2B;IAC1B,IAAI;MACH,MAAMb,IAAI,GAAGkB,MAAM,CAACxB,IAAI,CAAC0B,OAAL,CAAaN,OAAO,CAACC,GAArB,EAA0BI,KAA1B,CAAD,CAAnB;;MAEA,IAAIV,SAAS,CAACK,OAAO,CAACP,IAAT,EAAeP,IAAf,CAAb,EAAmC;QAClC,OAAOmB,KAAP;MACA;IACD,CAND,CAME,OAAOE,CAAP,EAAU,CACX;EACD;AACD,CApBD"},"metadata":{},"sourceType":"script"}